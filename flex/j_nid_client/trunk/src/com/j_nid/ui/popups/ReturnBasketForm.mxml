<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml"
	title="รายการคืนลัง"	layout="vertical"
	creationComplete="creationCompleteHandler(event)"
	showCloseButton="true" close="close()"
	width="800" height="600">
	
	<mx:Script>
		<![CDATA[
			import com.j_nid.utils.Responder;
			import com.j_nid.utils.ServiceUtils;
			import com.j_nid.utils.Utils;
			
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.collections.XMLListCollection;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			[Bindable]
			private var pledgeBaskets:XMLListCollection;
			[Bindable]
			private var nonPledgeBaskets:XMLListCollection;
			[Bindable]
			private var returnBaskets:XMLListCollection;
			private var sort:Sort;
			private var baskets:XMLList;
			
			private function creationCompleteHandler(e:FlexEvent):void {
				sort = new Sort();
				sort.fields = [new SortField("name")];
				loadCustomers();
			}
			
			private function loadCustomers():void {
				var responder:com.j_nid.utils.Responder =
					new com.j_nid.utils.Responder(customerResultHandler);
				var attrs:String = "attrs=id,name";
				var filters:String = "filters=is_customer=1";
				ServiceUtils.send("/people/?" + attrs + "&" + filters,
					"GET", responder);
			}
			
			private function customerResultHandler(data:Object):void {
				customerField.dataProvider = data.result.children();
				customerField.selectedIndex = -1;
			}
			
			private function loadBaskets():void {
				pledgeBaskets = new XMLListCollection();
				pledgeBaskets.sort = sort;
				nonPledgeBaskets = new XMLListCollection();
				nonPledgeBaskets.sort = sort;
				returnBaskets = new XMLListCollection();
				var responder:com.j_nid.utils.Responder =
					new com.j_nid.utils.Responder(basketResultHandler);
				var attrs:String = "attrs=id,name,is_pledge";
				var filters:String = "filters=is_return=0";
				var customerID:int = customerField.selectedItem.id;
				ServiceUtils.send("/people/" + customerID + "/baskets/?" + attrs + "&" + filters,
					"GET", responder);
			}
			
			private function basketResultHandler(data:Object):void {
				baskets = data.result.children();
				for each (var basket:XML in baskets)
					if (Boolean(int(basket.is_pledge))) {
						var pledgeBasket:XML = getPledgeBasket(basket);
						if (pledgeBasket) {
							pledgeBasket.quantity = int(pledgeBasket.quantity) + 1;
						} else {
							pledgeBasket = basket.copy();
							pledgeBasket.quantity = 1;
							pledgeBaskets.addItem(pledgeBasket);
						}
					} else {
						var nonPledgeBasket:XML = getNonPledgeBasket(basket);
						if (nonPledgeBasket) {
							nonPledgeBasket.quantity = int(nonPledgeBasket.quantity) + 1;
						} else {
							nonPledgeBasket = basket.copy();
							nonPledgeBasket.quantity = 1;
							nonPledgeBaskets.addItem(nonPledgeBasket);
						}
					}
				pledgeBaskets.refresh();
				nonPledgeBaskets.refresh();
			}
			
			private function getPledgeBasket(basket:XML):XML {
				for each (var pb:XML in pledgeBaskets)
					if (pb.name == basket.name)
						return pb;
				return null;
			}
			
			private function getNonPledgeBasket(basket:XML):XML {
				for each (var npb:XML in nonPledgeBaskets)
					if (npb.name == basket.name)
						return npb;
				return null;
			}
			
			private function close():void {
				Utils.hidePopUp(this);
			}
			
			private function selectCustomerBtnDown(e:FlexEvent):void {
				var form:PersonSelectForm =
					PersonSelectForm(Utils.showPopUp(PersonSelectForm));
				form.people = new XMLListCollection(XMLList(customerField.dataProvider));
				form.addEventListener(Event.REMOVED_FROM_STAGE,
					personSelectFormCloseHandler);
			}
			
			private function personSelectFormCloseHandler(e:Event):void {
				var form:PersonSelectForm = PersonSelectForm(e.currentTarget);
				form.removeEventListener(Event.REMOVED_FROM_STAGE,
					personSelectFormCloseHandler);
				if (form.selectedPerson) {
					customerField.selectedItem = form.selectedPerson;
					loadBaskets();
				}
			}
			
			private function dragDropHandler(e:DragEvent):void {
				returnList.hideDropFeedback(e);
				var basket:XML = e.dragSource.dataForFormat("items")[0];
				var returnBasket:XML = getReturnBasket(basket);
				if (returnBasket) {
					returnBasket.quantity = int(returnBasket.quantity) + 1;
				} else {
					returnBasket = basket.copy();
					returnBasket.quantity = 1;
					returnBasket.maximum = int(basket.quantity);
					returnBaskets.addItem(returnBasket);
				}
				e.preventDefault();
			}
			
			private function getReturnBasket(basket:XML):XML {
				for each (var rb:XML in returnBaskets)
					if (rb.name == basket.name)
						return rb;
				return null;
			}
			
			private function deleteBtnDownHandler(e:FlexEvent):void {
				var basket:XML = XML(returnList.selectedItem);
				returnBaskets.removeItemAt(returnBaskets.getItemIndex(basket));
			}
			
			private function clearBtnDownHandler(e:FlexEvent):void {
				returnBaskets.removeAll();
			}
			
			private function saveBtnDown(e:FlexEvent):void {
				if (returnBaskets.length > 0) {
					var basketOrders:XML = <basket_orders/>;
					for each (var basket:XML in returnBaskets)
						basketOrders.appendChild(getReturnBaskets(basket));
					var responder:com.j_nid.utils.Responder =
						new com.j_nid.utils.Responder(basketOrderResultHandler);
					ServiceUtils.send("/basketorders/",	"PUT", responder, basketOrders);
				}
			}
			
			private function getReturnBaskets(basket:XML):XMLList {
				var returnBaskets:XML = <baskets/>;
				for each (var b:XML in baskets) {
					var length:int = returnBaskets.children().length();
					if (b.name == basket.name &&
						basket.is_pledge == b.is_pledge &&
						length < int(basket.quantity)) {
						
						b.is_return = 1;
						returnBaskets.appendChild(b);
					}
				}
				return returnBaskets.children();
			}
			
			private function basketOrderResultHandler(data:Object):void {
				close();
			}
		]]>
	</mx:Script>
	
	<mx:HBox horizontalAlign="center" width="100%">
		
		<mx:Label text="ชื่อลูกค้า:"/>
		
		<mx:ComboBox id="customerField" labelField="name"
			change="loadBaskets()" width="250"/>
		
		<mx:Button label="เลือก" buttonDown="selectCustomerBtnDown(event)"/>
	</mx:HBox>
	
	<mx:HBox width="100%" height="100%">
		
		<mx:VBox width="50%" height="100%">
			
			<mx:VBox width="100%" height="50%">
				<mx:Label text="ลังมัดจำ"/>
				
				<mx:List id="pledgeList" labelField="name"
					dataProvider="{pledgeBaskets}" dragEnabled="true"
					itemRenderer="com.j_nid.ui.renderers.BasketRenderer"
					width="100%" height="100%"/>
			</mx:VBox>
			
			<mx:VBox width="100%" height="50%">
				<mx:Label text="ลังไม่มัดจำ"/>
				
				<mx:List id="nonPledgeList" labelField="name"
					dataProvider="{nonPledgeBaskets}" dragEnabled="true"
					itemRenderer="com.j_nid.ui.renderers.BasketRenderer"
					width="100%" height="100%"/>
			</mx:VBox>
		</mx:VBox>
		
		<mx:VBox width="50%" height="100%">
			<mx:Label text="คืนลัง"/>
			
			<mx:List id="returnList" labelField="name"
				dataProvider="{returnBaskets}" dropEnabled="true"
				dragDrop="dragDropHandler(event)"
				itemRenderer="com.j_nid.ui.renderers.ReturnBasketRenderer"
				width="100%" height="100%"/>
			
			<mx:HBox horizontalAlign="center" width="100%">
				
				<mx:Button label="ล้าง" buttonDown="clearBtnDownHandler(event)"/>
				
				<mx:Button label="ลบ" enabled="{returnList.selectedItem}"
					buttonDown="deleteBtnDownHandler(event)"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	
	<mx:ControlBar horizontalAlign="right">
		
		<mx:Button label="บันทึก" buttonDown="saveBtnDown(event)"/>
		
		<mx:Button label="ยกเลิก" buttonDown="close()"/>
	</mx:ControlBar>
</mx:TitleWindow>
