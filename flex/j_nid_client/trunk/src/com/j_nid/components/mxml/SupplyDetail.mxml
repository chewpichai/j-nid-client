<?xml version="1.0" encoding="utf-8"?>
<mx:Panel title="{resourceManager.getString('MakeSupply', 'Supply')}"
    xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:jn="com.j_nid.components.mxml.*"
    xmlns:adobe="http://www.adobe.com/2006/fc"
    layout="vertical" 
    paddingLeft="5"
    paddingRight="5"
    paddingTop="5">
    
    <mx:Metadata>
        [ResourceBundle("MakeSupply")]
    </mx:Metadata>
    
    <mx:Script>
        <![CDATA[
        	import com.j_nid.controls.ApplicationManager;
        	import mx.events.CollectionEvent;
        	import com.j_nid.utils.Utils;
        	import mx.collections.ArrayCollection;
            import com.j_nid.models.Person;
            import mx.resources.ResourceBundle;
            import mx.managers.PopUpManager;
            import mx.managers.DragManager;
            import mx.core.Application;
            import mx.controls.Alert;
            import com.j_nid.components.mxml.forms.SupplyProcessForm;
            import com.j_nid.models.Supply;
            import com.j_nid.models.Product;
            import com.j_nid.utils.ModelUtils;
            import com.j_nid.models.SupplyItem;
            import mx.events.DragEvent;
            
            [Bindable]
            public var supply:Supply;
            [Bindable]
            public var suppliers:Array;
            [Bindable]
            public var model:ModelUtils = ModelUtils.getInstance();
            private var appMgr:ApplicationManager =
                ApplicationManager.getInstance();
            [Bindable]
            private var utils:Utils = Utils.getInstance();
            [Bindable]
            private var total:Number;
            private var errMsg:String;
            
            public function set supplyItems(obj:ArrayCollection):void {
            	supplyItemList.dataProvider = obj;
                obj.addEventListener(CollectionEvent.COLLECTION_CHANGE,
                    supplyItemsChange);
            }
            
            private function supplyItemsChange(e:CollectionEvent):void {
                total = utils.sum(e.currentTarget, "total");
            }
            
            private function dragEnterListener(e:DragEvent):void {
                DragManager.acceptDragDrop(DataGrid(e.currentTarget));
            }
            
            private function dragDropListener(e:DragEvent):void {
                var product:Product = e.dragSource.dataForFormat("items")[0];
                var supplyItem:SupplyItem = new SupplyItem();
                supplyItem.productID = product.id;
                supplyItem.pricePerUnit = product.costPerUnit;
                supplyItem.unit = product.unit;
                addSupplyItem(supplyItem);
            }
            
            public function addSupplyItem(item:SupplyItem):void {
                for each (var obj:SupplyItem in supplyItemList.dataProvider) {
                    if (item.productID == obj.productID) {
                        obj.unit += item.unit;
                        return;
                    }
                }
                supplyItemList.dataProvider.addItem(item);
                supplyItemList.verticalScrollPosition = 
                    supplyItemList.maxVerticalScrollPosition;
            }
                        
            private function clearListener(e:MouseEvent):void {
                supplyItemList.dataProvider.removeAll();
            }
            
            private function removeListener(e:MouseEvent):void {
                var item:SupplyItem = SupplyItem(supplyItemList.selectedItem);
                if (item != null) {
                    var i:int = supplyItemList.dataProvider.getItemIndex(item);
                    supplyItemList.dataProvider.removeItemAt(i);
                }
            }
            
            private function processListener(e:MouseEvent):void {
                if (isValid()) {
                    supply.personID = model.getPersonByName(supplierFiled.text).id;
                    supply.notation = notationField.text;
                    supply.supplyItems = supplyItemList.dataProvider.source;
                    var processForm:SupplyProcessForm = SupplyProcessForm(
                        PopUpManager.createPopUp(
                            Application(Application.application),
                            SupplyProcessForm, true));
                    processForm.supply = supply;
                } else {
                    appMgr.showMessage(errMsg,
                        resourceManager.getString("MakeSupply", "ErrorTitle"));
                }
            }
            
            private function isValid():Boolean {
            	errMsg = "";
                if (supplyItemList.dataProvider.length == 0) {
                    errMsg += resourceManager.getString("MakeSupply",
                                  "ItemLengthError");
                }
                if (model.getPersonByName(supplierFiled.text) == null) {
                    errMsg += resourceManager.getString("MakeSupply",
                                  "CustomerError");
                }
                return errMsg.length == 0;
            }
        ]]>
    </mx:Script>
    
    <mx:HBox width="100%" verticalAlign="middle">
        
        <mx:Label
            text="{resourceManager.getString('MakeSupply', 'SupplierName')}:"/>
        
        <adobe:AutoComplete id="supplierFiled"
        	dataProvider="{suppliers}"
            labelField="name"
            width="100%"/>
    </mx:HBox>
    
    <mx:DataGrid id="supplyItemList" 
        dataProvider="{supply.supplyItems}"
        dragDrop="dragDropListener(event)" 
        dragEnter="dragEnterListener(event)"
        itemEditEnd="event.preventDefault()" 
        editable="true" 
        wordWrap="true" variableRowHeight="true" 
        styleName="cartItemList"
        width="100%"
        height="100%">
        
        <mx:columns>
            <mx:DataGridColumn 
                headerText="{resourceManager.getString(
                                    'MakeSupply', 'Quantity')}"
                dataField="quantity" 
                editorDataField="value"
                rendererIsEditor="true" 
                headerStyleName="dgHeader"
                width="70">
                <mx:itemRenderer>
                    <mx:Component>
<mx:NumericStepper minimum="1" maximum="1000" 
    change="{data.quantity = value}"/>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            
            <mx:DataGridColumn 
                headerText="{resourceManager.getString('MakeSupply', 'Name')}" 
                dataField="name" 
                editable="false" 
                headerStyleName="dgHeader"
                width="150"/>
            
            <mx:DataGridColumn 
                headerText="{resourceManager.getString('MakeSupply', 'Unit')}"
                dataField="unit" 
                editorDataField="value" 
                rendererIsEditor="true" 
                headerStyleName="dgHeader"
                width="70">
                <mx:itemRenderer>
                    <mx:Component>
<mx:NumericStepper minimum="1" maximum="100000" 
    change="{data.unit = value}"/>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            
            <mx:DataGridColumn 
                headerText="{resourceManager.getString(
                                    'MakeSupply', 'PricePerUnit')}"
                dataField="pricePerUnit" 
                editorDataField="value"
                rendererIsEditor="true"
                headerStyleName="dgHeader"
                width="85">
                <mx:itemRenderer>
                    <mx:Component>
<mx:NumericStepper minimum="1" maximum="10000" stepSize="0.25" 
    change="{data.pricePerUnit = value}"/>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:DataGridColumn>
            
            <mx:DataGridColumn 
                headerText="{resourceManager.getString('MakeSupply', 'Total')}"
                dataField="total" 
                editable="false"
                headerStyleName="dgHeader"
                width="85"/>
        </mx:columns>
    </mx:DataGrid>
    
    <mx:Text id="totalTxt" 
        text="{resourceManager.getString('MakeSupply', 'Summary',
                    [utils.formatPrice(total)])}" 
        textAlign="right" 
        paddingRight="10"
        width="100%" height="30"/>
    
    <mx:ControlBar>
        <mx:TextArea id="notationField" 
            width="100%" height="60"/>
        
        <mx:Button label="{resourceManager.getString('MakeSupply', 'Clear')}"
            click="clearListener(event)"/>
        
        <mx:Button label="{resourceManager.getString('MakeSupply', 'Remove')}"
        	enabled="{supplyItemList.selectedItem != null}"
            click="removeListener(event)"/>
        
        <mx:Button label="{resourceManager.getString('MakeSupply', 'Process')}"
            click="processListener(event)"/>
    </mx:ControlBar>
</mx:Panel>
