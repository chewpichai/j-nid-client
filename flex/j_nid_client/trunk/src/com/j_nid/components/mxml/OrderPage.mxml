<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	creationComplete="creationComplete(event)"
	width="100%" height="100%">
	
	<mx:Metadata>
		[ResourceBundle("OrderPage")]
	</mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.resources.ResourceBundle;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.collections.ArrayCollection;
			import com.j_nid.utils.DateUtils;
			import com.j_nid.models.Person;
			import mx.binding.utils.ChangeWatcher;
			import com.j_nid.controls.EventNames;
			import com.j_nid.utils.CairngormUtils;
			import mx.events.FlexEvent;
			import mx.collections.ListCollectionView;
			import mx.events.ListEvent;
			import mx.events.CalendarLayoutChangeEvent;
			import com.j_nid.utils.PrintUtils;
			import com.j_nid.models.Order;
			import com.j_nid.models.OrderItem;
			import com.j_nid.models.JNidModelLocator;
			
			[Bindable]
			private var model:JNidModelLocator = JNidModelLocator.getInstance();
			
			private function creationComplete(e:FlexEvent):void {
				ChangeWatcher.watch(personField, "selectedIndex", filterOrder);
				ChangeWatcher.watch(dateField, "selectedRanges", filterOrder);
				ChangeWatcher.watch(outstandingField, "selected", filterOrder);
				ChangeWatcher.watch(paidField, "selected", filterOrder);
				initData();
			}
			
			private function initData():void {
				outstandingField.selected = true;
				var today:Date = new Date();
				var rangeEnd:Date = new Date(today.fullYear, today.month, today.date);
				var rangeStart:Date = DateUtils.moveDateByDay(rangeEnd, -365);
				dateField.selectedRanges = [{rangeStart: rangeStart, rangeEnd: rangeEnd}];
			}
			
			private function filterOrder(e:Event):void {
				try {
					var orders:ListCollectionView = ListCollectionView(orderList.dataProvider);
					orders.filterFunction = function(obj:Object):Boolean {
						var order:Order = Order(obj);
						return checkPerson(order.person) &&
							checkStatus(order) &&
							checkDate(order.created);
					};
					orders.refresh();
				} catch (err:TypeError) {
					
				}
			}
			
			private function checkPerson(person:Person):Boolean {
				if (personField.selectedItem == null) {
					return true;
				}
				return person == personField.selectedItem;
			}
			
			private function checkDate(date:Date):Boolean {
				if (dateField.selectedRanges.length == 0) {
					return true;
				}
				for each (var obj:Object in dateField.selectedRanges) {
					var start:Date = new Date(obj.rangeStart.time);
					var end:Date = new Date(obj.rangeEnd.time);
					// Move end date to the midnight of the next day.
					end = DateUtils.moveDateByDay(end, 1);
					if (date >= start && date < end) {
						return true;
					}
				}
				return false;
			}
			
			private function checkStatus(order:Order):Boolean {
				var statusArray:Array = new Array();
				if (outstandingField.selected && order.isOutstanding) {
					return true;
				}
				if (paidField.selected && order.isPaid) {
					return true;
				}
				return false;
			}
			
			internal function removeOrderItem(item:OrderItem):void {
				item.order.removeItem(item);
				model.removeOrderItem(item);
				CairngormUtils.dispatchEvent(EventNames.DELETE_ORDER_ITEM, item);
			}
			
			private function printOrder(e:MouseEvent):void {
				var order:Order = Order(orderList.selectedItem);
				PrintUtils.printOrder(order);
			}
			
			private function deleteOrderClick(e:MouseEvent):void {
				var order:Order = Order(orderList.selectedItem);
				model.removeOrder(order);
				CairngormUtils.dispatchEvent(EventNames.DELETE_ORDER, order);
			}
			
			private function getCustomer(peopleArray:Array):ArrayCollection {
				var customers:ArrayCollection = new ArrayCollection(peopleArray);
				var sort:Sort = new Sort();
				sort.fields = [new SortField("name")];
				customers.sort = sort;
				customers.filterFunction = function(obj:Object):Boolean {
					return Person(obj).isCustomer;
				};
				customers.refresh();
				return customers;
			}
			
			private function searchChange(e:Event):void {
				personField.dataProvider.filterFunction = function(item:Object):Boolean {
					var person:Person = Person(item);
					person.sortIndex = person.name.indexOf(personSearchField.text);
					return person.sortIndex != -1;
				};
				var sort:Sort = new Sort();
				sort.fields = [new SortField("sortIndex"), new SortField("name")];
				personField.dataProvider.sort = sort;
				personField.dataProvider.refresh();
			}
			
			private function itemListKeyDown(e:KeyboardEvent):void {
				var item:OrderItem = OrderItem(orderItemList.selectedItem);
				if (e.keyCode == Keyboard.DELETE && item != null) {
					removeOrderItem(item);
				}
			}
			
			private function formatNumber(item:Object,
            								column:DataGridColumn):String {
            	return numberFormatter.format(item.total);
            }
		]]>
	</mx:Script>
	
	<mx:DateFormatter id="dateFormatter" formatString="DD/MM/YY J:NN:SS"/>
	
	<mx:NumberFormatter id="numberFormatter"
    	precision="2"/>
	
	<mx:Panel title="{resourceManager.getString('OrderPage', 'Filter')}"
		verticalGap="5"
		paddingTop="5" paddingBottom="5"
		width="220" height="100%">
		
		<mx:HBox
			paddingLeft="5" paddingRight="5"
			verticalAlign="middle"
			width="100%">
			
			<mx:Label
				text="{resourceManager.getString('OrderPage', 'SearchCustomer')}:"/>
		
			<mx:TextInput id="personSearchField"
				change="searchChange(event)"
				width="100%"/>
		</mx:HBox>
		
		<mx:List id="personField" 
			dataProvider="{getCustomer(model.people.source)}"
			labelField="name"
			borderThickness="0"
			width="100%" height="100%"/>
			
		<mx:DateChooser id="dateField"
			allowMultipleSelection="true"
			borderThickness="0"
			cornerRadius="0"
			width="100%"/>
			
		<mx:VBox
			paddingLeft="5" paddingRight="5"
			paddingBottom="5"
			width="100%">
			
			<mx:CheckBox id="outstandingField"
				label="{resourceManager.getString('OrderPage', 'Outstanding')}"/>
			
			<mx:CheckBox id="paidField"
				label="{resourceManager.getString('OrderPage', 'Paid')}"/>
		</mx:VBox>
	</mx:Panel>
	
	<mx:Panel title="{resourceManager.getString('OrderPage', 'Order')}" 
		layout="absolute"
		width="250" height="100%">
		
		<mx:List id="orderList" 
			dataProvider="{model.orders.source}" 
			width="100%" height="100%"/>
	</mx:Panel>
	
	<mx:Panel title="{resourceManager.getString('OrderPage', 'Detail')}" 
		layout="vertical"
		paddingLeft="5" paddingRight="5" 
		paddingTop="5"
		width="100%" height="100%">
		
		<mx:HBox 
			width="100%" height="35" 
			paddingTop="5" paddingRight="5" 
			horizontalAlign="right">
			
			<mx:Label text="{orderList.selectedItem.person.name}"/>
			<mx:Label text="{dateFormatter.format(orderList.selectedItem.created)}"/>
		</mx:HBox>
		
		<mx:DataGrid id="orderItemList" 
			dataProvider="{orderList.selectedItem.orderItems}"
			textAlign="center"
			keyDown="itemListKeyDown(event)"
			width="100%" height="100%">
			<mx:columns>
				<mx:DataGridColumn
					headerText="{resourceManager.getString('OrderPage', 'Quantity')}"
					dataField="quantity"
					headerStyleName="dgHeader"
					width="50"/>
				<mx:DataGridColumn
					headerText="{resourceManager.getString('OrderPage', 'Name')}"
					dataField="name"
					headerStyleName="dgHeader"/>
				<mx:DataGridColumn
					headerText="{resourceManager.getString('OrderPage', 'Unit')}"
					dataField="unit"
					textAlign="right"
					headerStyleName="dgHeader"
					width="50"/>
				<mx:DataGridColumn
					headerText="{resourceManager.getString('OrderPage', 'PricePerUnit')}"
					dataField="pricePerUnit"
					labelFunction="formatNumber"
					textAlign="right"
					headerStyleName="dgHeader"
					width="85"/>
				<mx:DataGridColumn
					headerText="{resourceManager.getString('OrderPage', 'Total')}"
					dataField="total"
					labelFunction="formatNumber"
					textAlign="right"
					headerStyleName="dgHeader"
					width="85"/>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:HBox horizontalAlign="right"
			paddingRight="5"
			width="100%" height="35">
			
			<mx:Label
				text="{numberFormatter.format(orderList.selectedItem.total)}"/>
		</mx:HBox>
		
		<mx:ControlBar horizontalAlign="right">
		
			<mx:Button label="{resourceManager.getString('OrderPage', 'Delete')}"
				click="deleteOrderClick(event)"/>
			
			<mx:Button label="{resourceManager.getString('OrderPage', 'Print')}"
				click="printOrder(event)"/>
		</mx:ControlBar>
	</mx:Panel>
</mx:HBox>
