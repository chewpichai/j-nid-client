<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               title="รายละเอียด" borderAlpha="0.8"
               close="close()"
               width="800" height="600">
    
    <s:layout>
        <s:VerticalLayout paddingBottom="10" paddingTop="10"/>
    </s:layout>
    
    <fx:Script>
        <![CDATA[
            import com.j_nid.utils.PrintUtils;
            import com.j_nid.utils.Responder;
            import com.j_nid.utils.ServiceUtils;
            import com.j_nid.utils.Utils;
            
            import mx.collections.XMLListCollection;
            import mx.events.FlexEvent;
            
            private var _payment:XML;
            [Bindable]
            private var depositedBaskets:XMLListCollection;
            [Bindable]
            private var nonDepositBaskets:XMLListCollection;
            
            [Bindable]
            public function set payment(obj:XML):void {
                _payment = obj;
                loadReturnBaskets();
            }
            
            public function get payment():XML {
                return _payment;
            }
            
            private function loadReturnBaskets():void {
                var responder:com.j_nid.utils.Responder =
                    new com.j_nid.utils.Responder(basketResultHandler);
                var attrs:String = "attrs=id,name,price_per_unit,is_deposit";
                ServiceUtils.send("/payments/" + payment.id + "/baskets/?" + attrs,
                    "GET", responder);
            }
            
            private function basketResultHandler(data:Object):void {
                depositedBaskets = new XMLListCollection();
                nonDepositBaskets = new XMLListCollection();
                for each (var basket:XML in data.result.children()) {
                    if (Boolean(int(basket.is_deposit))) {
                        var depositedBasket:XML = getDepositedBasket(basket);
                        if (depositedBasket) {
                            depositedBasket.quantity = int(depositedBasket.quantity) + 1;
                        } else {
                            depositedBasket = basket.copy();
                            depositedBasket.quantity = 1;
                            depositedBaskets.addItem(depositedBasket);
                        }
                    } else {
                        var nonDepositBasket:XML = getNonDepositBasket(basket);
                        if (nonDepositBasket) {
                            nonDepositBasket.quantity = int(nonDepositBasket.quantity) + 1;
                        } else {
                            nonDepositBasket = basket.copy();
                            nonDepositBasket.quantity = 1;
                            nonDepositBaskets.addItem(nonDepositBasket);
                        }
                    }
                }
            }
            
            private function getDepositedBasket(basket:XML):XML {
                for each (var pb:XML in depositedBaskets)
                if (pb.name == basket.name)
                    return pb;
                return null;
            }
            
            private function getNonDepositBasket(basket:XML):XML {
                for each (var npb:XML in nonDepositBaskets)
                if (npb.name == basket.name)
                    return npb;
                return null;
            }
            
            private function formatDate(val:String):String {
                var date:Date = new Date(Date.parse(val));
                return Utils.formatDate(date, "DD-MM-YYYY JJ:NN");
            }
            
            private function close():void {
                Utils.hidePopUp(this);
            }
            
            private function closeBtnDownHandler(e:FlexEvent):void {
                close();
            }
            
            public static function totalLabelFunction(item:Object,
                                                      column:DataGridColumn):String {
                
                return Utils.formatPrice(Number(item.quantity) * Number(item.price_per_unit));
            }
        ]]>
    </fx:Script>
    
    <s:HGroup verticalAlign="middle" paddingRight="5" width="100%">
        <mx:FormItem label="ชื่อลูกค้า:">
            <s:Label text="{payment.person_name}"/>
        </mx:FormItem>
        <s:Rect width="100%"/>
        <mx:FormItem label="วันที่:">
            <s:Label text="{formatDate(payment.created)}"/>
        </mx:FormItem>
    </s:HGroup>
    
    <s:VGroup width="100%" height="100%">
        <s:VGroup width="100%" height="100%">
            <s:Label text="ลังมัดจำ"/>
            <mx:DataGrid dataProvider="{depositedBaskets}" borderStyle="none"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn dataField="quantity" headerText="จำนวน"
                                       width="55"/>
                    <mx:DataGridColumn dataField="name" headerText="ชื่อ"/>
                    <mx:DataGridColumn dataField="price_per_unit"
                                       headerText="ราคาต่อหน่วย"
                                       labelFunction="Utils.priceLabelFunction"
                                       width="110"/>
                    <mx:DataGridColumn headerText="รวม"
                                       labelFunction="totalLabelFunction"
                                       width="110"/>
                </mx:columns>
            </mx:DataGrid>
        </s:VGroup>
        
        <s:VGroup width="100%" height="100%">
            <s:Label text="ลังไม่มัดจำ"/>
            <mx:DataGrid dataProvider="{nonDepositBaskets}" borderStyle="none"
                         width="100%" height="100%">
                <mx:columns>
                    <mx:DataGridColumn dataField="quantity" headerText="จำนวน"
                                       width="55"/>
                    <mx:DataGridColumn dataField="name" headerText="ชื่อ"/>
                    <mx:DataGridColumn dataField="price_per_unit"
                                       headerText="ราคาต่อหน่วย"
                                       labelFunction="Utils.priceLabelFunction"
                                       width="110"/>
                    <mx:DataGridColumn headerText="รวม"
                                       labelFunction="totalLabelFunction"
                                       width="110"/>
                </mx:columns>
            </mx:DataGrid>
        </s:VGroup>
    </s:VGroup>
    
    <mx:FormItem label="หมายเหตุ:" width="100%">
        <s:Label text="{payment.notation}" width="100%"/>
    </mx:FormItem>
    
    <s:HGroup horizontalAlign="right" paddingRight="5" width="100%">
        <s:Label text="รวมทั้งสิ้น {Utils.formatPrice(payment.amount)} บาท"
                 textAlign="right"/>
    </s:HGroup>
    
    <s:controlBarLayout>
        <s:HorizontalLayout horizontalAlign="right" paddingRight="5"
                            paddingBottom="5" paddingTop="5"/>
    </s:controlBarLayout>
    
    <s:controlBarContent>
        <s:Button label="ปิด" buttonDown="closeBtnDownHandler(event)"/>
    </s:controlBarContent>
</s:TitleWindow>
