<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
          xmlns:s="library://ns.adobe.com/flex/spark" 
          xmlns:mx="library://ns.adobe.com/flex/mx"
          creationComplete="creationCompleteHandler(event)"
          horizontalAlign="center" width="100%" height="100%">
    
    <fx:Script>
        <![CDATA[
			import com.j_nid.ui.popups.PaymentDetailForm;
			import com.j_nid.ui.popups.PersonSelectForm;
			import com.j_nid.utils.Responder;
			import com.j_nid.utils.ServiceUtils;
			import com.j_nid.utils.Utils;
			
			import mx.collections.XMLListCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
            
            private function creationCompleteHandler(e:FlexEvent):void {
                loadCustomers();
            }
            
            private function loadCustomers():void {
                var responder:com.j_nid.utils.Responder =
                    new com.j_nid.utils.Responder(customerResultHandler);
                var attrs:String = "attrs=id,name,outstanding_total";
                var filters:String = "filters=is_customer=1";
                ServiceUtils.send("/people/?" + attrs + "&" + filters,
                    "GET", responder);
            }
            
            private function customerResultHandler(data:Object):void {
                customerField.dataProvider =
                    new XMLListCollection(data.result.children());
                customerField.selectedIndex = -1;
            }
            
            private function selectCustomerBtnDown(e:FlexEvent):void {
                var form:PersonSelectForm =
                    PersonSelectForm(Utils.showPopUp(PersonSelectForm));
                form.people = new XMLListCollection(XMLList(customerField.dataProvider));
                form.addEventListener(Event.REMOVED_FROM_STAGE,
                    personSelectFormCloseHandler);
            }
            
            private function personSelectFormCloseHandler(e:Event):void {
                var form:PersonSelectForm = PersonSelectForm(e.currentTarget);
                form.removeEventListener(Event.REMOVED_FROM_STAGE,
                    personSelectFormCloseHandler);
                if (form.selectedPerson) {
                    customerField.selectedItem = form.selectedPerson;
                    loadPayments();
                }
            }
            
            private function loadPayments():void {
                var responder:com.j_nid.utils.Responder =
                    new com.j_nid.utils.Responder(paymetsResultHandler);
				var customerID:int = customerField.selectedItem.id;
				var filters:String = "filters=date_range=";
				if (isTodayField.selected) {
					startDateField.selectedDate = new Date();
					endDateField.selectedDate = new Date();
				}
				var startDate:Date = startDateField.selectedDate;
				var endDate:Date = new Date(endDateField.selectedDate.time);
				endDate.date += 1;
				filters += Utils.formatDate(startDate, "YYYYMMDD") +
					":" + Utils.formatDate(endDate, "YYYYMMDD");
                ServiceUtils.send("/people/" + customerID + "/payments/?" + filters, "GET", responder);
            }
            
            private function paymetsResultHandler(data:Object):void {
                paymentList.dataProvider =
                    new XMLListCollection(data.result.children());
            }
            
            private function cratedLabelFunction(item:Object,
                                                 column:DataGridColumn):String {
                var created:Date = new Date(Date.parse(item[column.dataField]));
                return Utils.formatDate(created, "DD MMM YYYY JJ:NN");
            }
            
            private function paymentListKeyDown(e:KeyboardEvent):void {
                if (e.keyCode == Keyboard.DELETE &&
                    paymentList.selectedItem != null) {
                    
                    Utils.showConfirm("ต้องการลบข้อมูลหรือไม่",
                        "ยืนยันการลบ", closeHandler);
                }
            }
            
            private function closeHandler(e:CloseEvent):void {
                var id:int = paymentList.selectedItem.id;
                var responder:com.j_nid.utils.Responder =
                    new com.j_nid.utils.Responder(deleteResultHandler);
                if (e.detail == Alert.OK) {
                    ServiceUtils.send("/payments/" + id + "/",
                        "DELETE", responder);
                }
            }
            
            private function deleteResultHandler(data:Object):void {
                loadPayments();
            }

            protected function customerFieldChangeHandler(e:IndexChangeEvent):void {
                if (customerField.selectedItem is XML)
                    loadPayments();
            }
			
			private function paymentListDoubleClick(e:MouseEvent):void {
				showPaymentDetailForm(paymentList.selectedItem.id);
			}

			private function showPaymentDetailForm(paymentID:int):void {
				var responder:com.j_nid.utils.Responder =
					new com.j_nid.utils.Responder(paymentResultHandler);
				var attrs:String = "attrs=id,amount,person_name,notation,created";
				ServiceUtils.send("/payments/" + paymentID + "/?" + attrs,
					"GET", responder);
			}
			
			private function paymentResultHandler(data:Object):void {
				var form:PaymentDetailForm =
					PaymentDetailForm(Utils.showPopUp(PaymentDetailForm));
				form.payment = data.result;
			}
        ]]>
    </fx:Script>
    
    <fx:Declarations>
        <!-- Place non-visual elements (e.g., services, value objects) here -->
    </fx:Declarations>
    
    <s:HGroup id="customerGroup" horizontalAlign="center" verticalAlign="middle"
              width="100%">
		<s:HGroup verticalAlign="middle">
	        <s:Label text="ชื่อลูกค้า:"/>
	        <s:ComboBox id="customerField" labelField="name"
	                    change="customerFieldChangeHandler(event)"
	                    width="250"/>
	        <s:Button label="เลือก" buttonDown="selectCustomerBtnDown(event)"/>
			<s:CheckBox id="isTodayField" label="รายการจ่ายวันนี้" selected="true"
						change="loadPayments()"/>
		</s:HGroup>
		<s:HGroup id="dateRangeGroup" verticalAlign="middle"
				  enabled="{!isTodayField.selected}">
			<s:Label text="เริ่มจากวันที่:"/>
			<mx:DateField id="startDateField" selectedDate="{new Date()}"
						  change="loadPayments()"/>
			<s:Label text="ถึงวันที่:"/>
			<mx:DateField id="endDateField" selectedDate="{new Date()}"
						  change="loadPayments()"/>
		</s:HGroup>
    </s:HGroup>
    
    <mx:DataGrid id="paymentList" headerStyleName="centerHeader"
                 wordWrap="true" variableRowHeight="true"
                 keyDown="paymentListKeyDown(event)"
				 doubleClickEnabled="true"
				 doubleClick="paymentListDoubleClick(event)"
                 width="70%" height="100%">
        <mx:columns>
            <mx:DataGridColumn headerText="วันที่" dataField="created"
                               labelFunction="cratedLabelFunction"
                               width="150"/>
            <mx:DataGridColumn headerText="จำนวน" dataField="amount"
                               labelFunction="Utils.priceLabelFunction"
                               textAlign="center" width="120"/>
            <mx:DataGridColumn headerText="หมายเหตุ" dataField="notation"/>
        </mx:columns>
    </mx:DataGrid>
</s:VGroup>
